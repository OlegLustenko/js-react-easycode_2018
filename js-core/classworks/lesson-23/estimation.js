//
//
//
// 1) Планирование -->
//
// Функциональные требования
//
// - Сортировка по имени
// - Пользователи получаются с сервера
//
// История (story) - большая задача, техническая и может быть абстрактной
//
// Маленькие подзадачи к этой стори - У вас отдельный Pull Request
//
// ---------------
//
//
//   Story -> сделать страницу Contacts-Page
//
// - Делаете верстку -> html - 1h
// - сделать JS класс -> в котором будет render + верстка (вы должны проверить, что рисуется на
// странице корректно) - 1h
//
// - Написать API для запросов к серверу - 30min / 1h
// const contactsPageAPI = {
//   getAllUsers() {
//   ...
//   }
// }
// {
//
//   [
//     fullName: ...,
//   phone: ...
//   email: ...
// }
// ]
//
// - Интеграция API + рендер пользователей на странице 4h /
// 1 method -> отображает
//   <tr><td>{userName}</td><tr>
//   <tr><td>{userSurname}</td><tr>
//   <tr><td>{userEmail}</td><tr>
//
//   -  (сохранить в App пришедших пользователей)
// -
//
//   - Сделать сортировку пользователей при нажатии на header
// 4h / 6h / 8h
//
//
// - Добавить фильтр(поиск) пользователей
// 4h / 6h / 8h
//
// - Интегрировать роутер...
// - добавить навигацию при нажатии на пользователя
//
//
//
//
// Стори ->
//   Написать Роутер
// ---
//
//   class Router {
//
//     navigate(newPage) {
//       this.setActivePage(newPage)
//     }
//   }
//
//
//
// Стори App
// class App {
//   constructor() {
//     this.router = new Router(state);
//
//     this.pages = {
//       contacts: new Contacts(state, this.router)
//     }
//
//   }
//
// }
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
